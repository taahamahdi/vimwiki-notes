= Design Patterns =

== Observer Pattern ==

* Publish/subscribe model
	* One class: publisher/subject -- generates data
	* >= 1 subscriber/observer classes -- receive data and react to it
	* *Example*: Subject -- spreadsheet cells, Observer -- graph
		* When cells change, the graph updates
		* Can be many different kinds of observer objects -- subject should not need to know all the details
		* Observer pattern:

| _Subject_           |
| + notifyObservers() |
| + attatch(observer) |
| + detatch(observer) |
-- Code common for all subjects
-- Open diamond pointing from Subject to Observer

| Concrete Subject |
| + getState()     |
-- Open arrow pointing from ConcreteSubject to Subject

| _Observer_ |
| + notify() |
-- Interface common to all observers
-- Independent to the Subject

| Concrete Observer |
| + notify()        |
-- Open arrow pointing from ConcreteObserver to Observer
-- Open diamond pointing from Concrete Observer to Concrete Subject

* Sequence of method calls
	1. Subject's state is updated
	2. `Subject::notifyObservers()` -- Calls every observer's `notify()`
	3. Each observer calls `ConcreteSubject::getState()` to query the state and react accordingly

* *Example*: Horse races
	* Subject -- Publishes winners
	* Observers -- Individual bettors -- declare victory when their horse wins
{{{cpp
class Subject {
	vector<Observer*> observers;
public:
	void attach(Observer *ob) { observers.emplace_back(ob); }
	void detatch(Observer *ob); // Remove from observers -- lookup
	void notifyObservers() { for (auto &ob:observers) ob->notify(); }
	virtual ~Subject() = 0;
};

Subject::~Subject() {}

class Observer {
public:
	virtual void notify() = 0;
	virtual ~Observer() {}
};

class HorseRace: public Subject { // Concrete subject
	ifstream in; // Source of data
	string lastwinner;
public:
	HorseRace(string source): in{source} {}
	bool runRace() {
		in >> lastwinner;
		return in;
	} // Returns false at EOF
	string getState() { return lastwinner; }
};

class Bettor: public Observer { // Concrete observer
	HorseRace *subject;
	string name, myHorse;
public:
	Bettor(___): _____ {
		Subject->attach(this);
	}
	~Bettor() { Subject->attatch(this); }
	// Don't delete Subject -- we don't own it
	void notify() {
		string winner = subject->getState();
		if (winner == myHorse) cout << "Win!";
		else cout << ":[";
	}
};

// main.cc

HorseRace hr;
Bettor Larry(&hr, "Larry", "RunsLikeACow");
// ...(other bettors)
while(hr.runRace()) {
	hr.notifyObservers();
}
}}}

== Decorator Pattern ==

* Want to add/remove functionality to/from an object at runtime
* *Example*: Windowing system
	* Start with basic window
	* Add a scrollbar
	* Add a menu
	* Want to choose these enhancements at runtime
* UML:
-- Window Interface
| _Component_   |
| + operation() |

-- Basic Window
| ConcreteComponent |
| + operation()     |

| _Decorator_ |
-- Open arrow pointing from Decorator and ConcreteComponent to Component

| Concrete Decorator A |
| operation()          |
-- With menu

| Concrete Decorator B |
| operation()          |
-- With scrollbar
-- Open arrow pointing from Concrete Decorator A/B to Decorator

	* Component -- interface -- operations your objects will provide
	* Concrete Component -- implements the interface -- basic object
	* Decorators -- inherit from _Decorator_, which inherits from _Component_
		* Every Decorator *is* a component and *has* a component
		* Window with a scrollbar *is* a window and *has* a pointer to the underlying plain window
		* Window with a scrollbar and a menu *is* a window and *has* a pointer to the window with a scrollbar, which *has* a pointer to a window
		* All inherit from Abstract Window, so Window methods can be used polymorphically on all of them
* *Example*: Pizza

| _Pizza_ |

| Crust and Sauce |
-- Basic pizza
-- Open arrow pointing from Crust and Sauce to Pizza

| _Decorator_ |
-- Open diamond from Decorator pointing to Pizza

| Topping |

| Stuffed Crust |

| Dipping Sauce |
 -- Topping, Stuffed Crust, Dipping Sauce all point to Decorator with open arrow

{{{cpp
class Pizza {
public:
	virtual float price() const = 0;
	virtual string desc() const = 0;
	virtual ~Pizza() {}
};

class CrustAndSauce: public Pizza {
public:
	float price() const override { return 5.99; }
	string desc() const override { "Pizza"; }
};

class Decorator: public Pizza {
protected:
	Pizza *component;
public:
	Decorator(Pizza *p): component{p} {}
	virtual ~Decorator() { delete component; }
	// Destroying the topping destroys the pizza
};

class StuffedCrust: public Decorator {
public:
	float price() { return component->price() + 2.69; }
	string desc() { return component->desc() + " with stuffed crust"; }
};
}}}

== Factory Method Pattern ==
* *Example*: Write a video game with 2 kinds of enemies: turtles and bullets
	* Randomly send turtles and bullets
	* Bullets are more frequent in harder levels

| _Enemy_ |

| Turtle |

| Bullet |
-- Open arrow from Turtle and Bullet to _Enemy_

| _Level_ |

| Easy |

| Hard |
-- Open arrow from Easy and Hard to _Level_

* Never know exactly which enemy comes next, so can't call turtle/bullet constructors directly
	* Instead, put a factory method in Level that creates enemies

{{{cpp
class Level {
public:
	virtual Enemy *createEnemy() = 0;
	// Factory method
};

class Easy: public Level {
public:
	Enemy *createEnemy() override {
		// Create mostly turtles
	}
};

class Hard: public Level {
public:
	Enemy *createEnemy() override {
		// Create mostly bullets
	}
};

// In client
Level *l = ...;
Enemy *e = l->createEnemy();
}}}

== Template Method Pattern ==

* Want subclasses to override superclass behavior, but some aspects must stay the same
	* *Example cont.*: There are red turtles and green turtles

{{{cpp
class Turtle {
public:
	void draw() {
		drawHead();
		drawShell();
		drawFeet();
	}
private:
	void drawHead() { ... }
	void drawFeet() { ... }
	virtual void drawShell() = 0;
};

class RedTurtle: public Turtle {
	void drawShell() override {
		// Draw red shell
	}
};

class GreenTurtle: public Turtle {
	void drawShell() override {
		// Draw green shell
	}
};
}}}
	* Subclasses can't change the way a `Turtle` is drawn (i.e. head, shell, feet), but can change the way a shell is drawn
	* *Generalization*: the Non-Virtual Interface (NVI) idiom
		* A public virtual method is really two things:
			1. `public` -- An interface to the client
				* Must indicate some provided behaviour with pre/post conditions
			2. `virtual` -- An interface to subclasses
				* A hook to insert specialized behavior
		* These two ideas are contradictory -- hard to separate them if they're tied to the same function
			* What if you want to split a `virtual` method into two, maybe with constant code in between?
				* Also changes client's interface
				* How can you make sure overriding functions confirm to pre-imposed conditions?
		* NVI says all `public` methods should be non-virtual
			* *All* virtual methods should be `private` (or at least `protected`)
				* Exception -- the destructor -- should always be `public`
			* *Example*:
{{{cpp
// Non-NVI
class DigitalMedia {
public:
	virtual void play() = 0;
};

// NVI
class DigitalMedia {
public:
	void play() {
		doPlay(); // Virtual helper
	}
private:
	virtual void doPlay() = 0;
};
}}}
				* Possible to add before/after code
				* *Example cont.*:
					* Check copyright of file before -- only play if no copyright
					* Update play count of song after
			* Generalizes Template Method -- puts *every* virtual function inside a template method

== Visitor Pattern ==

* For implementing *double dispatch*
	* `virtual` method -- Chosen based on the actual type (at runtime) of the receiving object
	* What if you want to choose based on *two* objects?
	* *Example*: Striking enemies with weapons:

| _Enemy_ |

| Turtle |

| Bullet |
-- Turtle and Bullet point to _Enemy_ with open arrow

| _Weapon_ |

| Rock |

| Strike |
-- Rock and Strike point to _Weapon_ with open arrow

	* Potential implementation:
{{{cpp
virtual void(Enemy, Weapon)::strike();
// NOT POSSIBLE
}}}
		* If `strike` is a method of _Enemy_ (respectively _Weapon_), choose based on _Enemy_ (respectively _Weapon_), but not on _Weapon_ (respectively _Enemy_)
		* Trick to get dispatch on both (double dispatch) combined *overriding* with *overloading*
{{{cpp
class Enemy {
public:
	virtual void beStruckBy(Weapon &w) = 0;
};

class Turtle: public Enemy {
public:
	void beStruckBy(Weapon &w) override { w.strike(*this); }
	// *this is a Turtle
};

class Bullet: public Enemy {
public:
	void beStruckBy(Weapon &w) override { w.strike(*this); }
	// *this is a Bullet
};
// NOT THE SAME -- STRIKE COULD BE DIFFERENT

class Weapon {
public:
	virtual void strike(Turtle &t) = 0;
	virtual void strike(Bullet &b) = 0; // Both are overloads
};

class Stick: public Weapon {
public:
	void strike(Turle &t) override {
		// Strike Turtle with stick
	}
	
	void strike(Bullet &b) override {
		// Strike Bullet with stick
	}
};

// class Rock is similar

Enemy *e = new Bullet { ... };
Weapon *w = new Rock { ... };

e->beStruckBy(*w); // What happens?
}}}
		* `Bullet::beStruckBy` runs (virtual method)
		* Calls `Weapon::strike(*this)`, `*this` is `Bullet`
		* Therefore `Bullet` version was chosen at compile time
		* `virtual` method call resolved to `Rock::strike(Bullet &b)`
		* Visitor can be used to add functionality to existing classes, without changing or recompiling the classes themselves
		* *Example*: Add a visitor to the `Book` hierarchy from earlier:
{{{cpp
class Book {
public:
	...
	virtual void accept(BookVisitor &v) { v.visit(*this); }
};

class Text: public Book {
public:
	...
	void accept(BookVisitor &v) { v.visit(*this); }
};
}}}
