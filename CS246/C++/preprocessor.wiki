= The Preprocessor =

* Transforms the program before the compiler sees it
	* `#______` indicates a *preprocessor directive*
		* `#include` is one notable example
* Including old C headers requires a new naming convention
	* *Example*: Instead of `#include <stdio.h>`, use `#include <cstdio>`
* We also have `#define VAR VALUE`, which sets a preprocessor variable `VAR`
	* Then all occurrences of `VAR` in the source file are replaced by `VALUE`
	* *Example*:
{{{cpp
#define MAX 10
int x[MAX];
}}}
		* The preprocessor transforms the statement to `int x[10];`
			* This use of `#define` is obsolete, *use* `const` *instead*
	* `#define FLAG` - sets the variable `FLAG` equal to the empty string (nothing)
	* Defined constants, however, are useful for conditional compilation
		* *Example*:
{{{cpp
#define SECURITYLEVEL 1 // (or 2)

#if SECURITYLEVEL == 1
	short int
#elif SECURITYLEVEL == 2
	long long int
#endif
	publickey;
}}}
			* The line following the first `#if` statement is removed if `SECURITYLEVEL == 2`, and the line following the second `#if` statement is removed if `SECURITYLEVEL == 1`
		* *Special case*:
{{{cpp
#if 0 // Never true -- all inner text is removed before it reaches the compiler
	...
#endif
}}}
			* Useful for nested commenting (instead of using `/*` and `*/`, since nested comments can break)
			* Can be seen as a "heavy duty" comment-out feature
		* We can also define symbols via compiler arguments
			* *Example*:
{{{cpp
// define.cc
int main() {
	cout << X << endl;
}
}}}
				* We can use `-D` on the command line when compiling to set a preprocessor variable
					* *Example*: `g++14 -DX=15 define.cc -o define`
	* `#ifdef NAME` - true if `NAME` has been defined
	* `#ifndef NAME` - true if `NAME` has not been defined
		* *Example*: These macros are useful for debugging:
{{{cpp
int main() {
	#ifdef DEBUG
		cerr << "setting x = 1\n";
	#endif
	int x = 1;
	while (x < 10) {
		++x;
		#ifdef DEBUG
			cerr << "x is now" << x << endl;
		#endif
	}
	cout << x << endl;
}
}}}
