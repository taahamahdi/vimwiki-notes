= Strings =

* In C, strings were arrays of characters (`char*` or `char[]`) terminated with `\0`
	* Must explicitly manage memory - allocate more memory as strings get larger
	* Easy to overwrite the null terminator and corrupt memory

* C++ strings - `include <string>`, type is `std::string`
	* Strings in C++ grow as needed (no need to manage memory)
	* Much safer to manipulate

* *Example*: `string s = "hello";`
	* `"hello"` is still a C-style character array (including `\0`)
	* `s` is a C++ string created from the C string on initialization

== String operations ==

* Equality/inequality:
	* `s1 == s2`, `s1 != s2` is legal (unlike C, where `strcmp` is necessary)
* Comparison:
	* `s1 <= s2` (lexicographic comparison)
* Length:
	* `s.length()`
	* `O(1)` operation, *can* be used as a loop condition
	* In C, length is an `O(n)` operation
* Get individual characters:
	* `s[0]`, `s[1]`, etc.
	* Mimics C
* String concatenation:
	* `s3 = s1 + s2`
	* Completes concatenation, takes care of all memory management
	* `s3 += s4` works too

{{{cpp
int main() {
	string s;
	cin >> s; // Skips leading whitespace, stops at whitespace (reads one word)
	cout << s << endl;
}
}}}
* What if we want the whitespace?
	* `getline(cin, s)` reads from current position to next newline into `s`

* Stream abstraction applies to other sources of data:
	* Files - read from a file instead of `stdin`
		* `std::ifstream` - read from a file
		* `std::ofstream` - write to a file

		* *Example*: File access in C:
{{{c
#include <stdio.h>

int main() {
	char s[256];
	FILE *f = fopen("file.txt", "r");
	while (true) {
		fscanf(f, "%255s", s);
		if (feof(f)) break; // fscanf, feof are file scanf, file eof
		printf("%s\n", s);
	}
	fclose(f);
}
}}}
		* *Example*: File access in C++:
{{{cpp
#include <iostream>
#include <fstream>
#include <string>
using namespace std;

int main() {
	ifstream f{"file.txt"}; // Declaring and initializing an ifstream opens the file
	string s;
	while (f >> s) {
		cout << s << endl;
	}
} // File is closed when ifstream (f) goes out of scope
}}}
			* Anything you can do with `cin` / `cout`, you can do with an `ifstream` / `ofstream`
	* Strings - attach a stream to a string and use it to read from/write to the string
		* `#include <sstream>`
			* `std::istringstream` - read from a string
			* `std::ostringstream` - write to a string
		* *Example*: Convert a number to a string
{{{cpp
string intToString(int n) {
	ostringstream sock;
	sock << n;
	return sock.str();
}
}}}
		* *Example*: Convert a string to a number
{{{cpp
int n;
while (true) {
	cout << "Enter a number:" << end;
	string s;
	cin >> s;
	istringstream sock {s};
	if (sock >> n) break;
	cout << "I said,";
}
cout << "You entered" << n << endl;
}}}

{{{cpp
#include <iostream>
#include <sstream>
using namespace std;

int main() {
	string s;
	while (cin >> s) {
		istringstream ss{s};
		int n;
		if (ss >> n) cout << n >> endl;
	}
}
