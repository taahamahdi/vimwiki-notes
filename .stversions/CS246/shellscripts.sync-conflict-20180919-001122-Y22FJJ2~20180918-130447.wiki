= Shell Scripts =

* Files containing sequences of shell commands, executed as programs
* *Example*: Print the date, current user, and curent directory

{{{sh
#!/bin/bash
date
whoami
pwd
}}}

* `#!/bin/bash` - "shebang line"
	* Execute this file as a bash script
* Give file execute permission
	* `chmod u+x myscript`
* Run the file
	* `./myscript`
		* Current directory

* Variables
	* `x=1` *(No spaces allowed)*
	* `echo $x`
		* Use `$` when fetching the value of a variable
		* No `$` when setting a variable
		* It is good practice to surround variables with brace brackets
			* `${x}`
		* *All variables contain strings*
			* `x=1`, where x is the string `"1"`, not the number
	* Some "global" variables
		* `env` prints all defined variables
		* `$PATH` - list of directories, separated by `:`
			* When you type a command, shell searches `PATH`'s directories (in order) for a program with that name
	* Single vs. double quotes for variables
		* `echo "${PATH}"` - prints the user's path
		* `echo '${PATH}'` - no dollar expansion, prints `${PATH}`
	* Special variables for scripts
		* `$1`, `$2`, etc.
			* Return the first, second, etc. command line arguments
		* *Example*: Check whether a word is in the dictionary
		* *Solution*: `./isItAWord hello`
{{{sh
#!/bin/bash
egrep "^$1$" /usr/share/dict/words
if [ $/ -eq 0 ]; then
	echo Bad password
else
	echo Maybe a good password
fi
}}}
			* Prints nothing if the word isn't found; prints the word if it is found 
			* Alternative method:
{{{sh
if egrep "&$1$" /usr/share/dict/words > /dev/null; then
	...
fi
}}}
		* *Example*: A good password shouldn't be in the dictionary -- write a script that answers whether the given string is a good password
		* *Solution*:
{{{sh
#!/bin/bash
egrep "^$1$" /usr/share/dict/words > /dev/null
}}}
			* `/dev/null` - suppress output

		* Every program returns a status code when finished
			* `egrep` returns a status code - `0` if found, `1` if not found
			* In Linux:
				* `0` - success
				* Non-zero - failure
				* (Typically) The higher the number, the bigger the failure
			* `$?` - status of the most recently executed command
		* *Example cont.*: Verify the number of arguments; print error message if wrong
{{{sh
#!/bin/bash
usage() {
	echo "Usage : $0 password" 1>&2
}
if [ $# -ne 1 ]; then
	usage
	exit 1
	# ... (rest as before)
}}}
			* `$0` - name of program
			* `1>&2` - redirect `stdout` to `stderr`
		* Format of if/else statements: `if` ... `elif` ... `elif` ... `else` ... `fi`

* Loops
	* *Example*: Print the numbers from `1` to `$1`
{{{sh
#!/bin/bash
x=1
while [ $x - le $1 ]; do
	echo $x
	x=$((x+1))
done
}}}
		* `$((...))` specify doing arithmetic
	* Looping over a list
		* *Example*: Rename all `.cpp` files to `.cc`
{{{sh
#!/bin/bash
for name in *.cpp; do
	mv ${name} ${name%cpp}cpp
done
}}}
			* Value of name without trailing `cpp` (`%` removes `cpp`)
		* *Example*: How many times does word `$1` occur in file `$2`?
{{{sh
#!/bin/bash
x=0
for word in $(cat $2); do
	if [ "$word" = "$1" ]; then
		x=$((x+1))
	fi
done
echo $x
}}}
			* Put strings in quotes when doing a comparison to prevent changing the line and thus breaking syntax
		* *Example*: Payday is the last Friday of the month -- when is this month's payday?
			* 2 required tests:
				1. Compute date
				2. Report answer
{{{sh
#!/bin/bash
report() {
	if [ $1 -eq 31 ]; then 
		echo "This month: the 31st."
	else
		echo "This month: the ${1}th."
	fi
}

report $(cal | awk '{print $6}' | grep "[0-9]" | tail -1)
# Becomes argument $1 in report
}}}
			* Generalize to any month - `cal October 2018` gives the calendar for October 2018
				* Let `payday October 2018` give October 2018's payday
					* `$1` - October
					* `$2` - 2018
{{{sh
report $(cal $1 $2 | awk '{print $6}' | egrep "[0-9]" | tail -1}
}}}
			* `$1` and `$2` are empty strings if not provided, and `report` thus returns to previous behavior
			* Adding `$1` to the end of the report call, we have:
{{{sh
report() {
	if [ $2 ]; then # If the month is not blank
		echo -n $2 # "-n" - no newline
	else 
		echo -n "This month:"
	fi
	if [ $1 -eq 31]; then
		echo ": the 31st"
	else
		echo ": the ${1}th month"
	fi
}
}}}

